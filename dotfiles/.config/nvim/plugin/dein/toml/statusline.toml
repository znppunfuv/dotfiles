[[plugins]]
repo = 'itchyny/lightline.vim'
depend = [
    'lightline-ale',
    'vim-gitgutter',
    'vim-devicons'
]
hook_add = '''
" statusline
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'active': {
        \ 'left': [
            \ ['mode', 'paste'],
            \ ['fugitive', 'filename'],
            \ [
                \ 'linter_checking',
                \ 'linter_errors',
                \ 'linter_warnings',
                \ 'linter_ok',
            \ ],
        \ ],
        \ 'right': [
            \ ['lineinfo'],
            \ ['percent'],
            \ [
                \ 'fileformat',
                \ 'fileencoding',
                \ 'filetype',
            \ ],
        \ ],
    \ },
    \ 'component_function': {
        \ 'mode':         'LightlineMode',
        \ 'fugitive':     'LightlineFugitive',
        \ 'filename':     'LightlineFilename',
        \ 'lineinfo':     'LightLineLineInfo',
        \ 'percent':      'LightLinePercent',
        \ 'fileformat':   'LightlineFileformat',
        \ 'fileencoding': 'LightlineFileencoding',
        \ 'filetype':     'LightlineFiletype',
    \ },
    \ 'component_expand': {
        \ 'linter_checking': 'lightline#ale#checking',
        \ 'linter_warnings': 'lightline#ale#warnings',
        \ 'linter_errors':   'lightline#ale#errors',
        \ 'linter_ok':       'lightline#ale#ok',
    \ },
    \ 'component_type': {
        \ 'linter_checking': 'left',
        \ 'linter_warnings': 'warning',
        \ 'linter_errors':   'error',
        \ 'linter_ok':       'left',
    \ },
    \ 'separator': { 'left' : '', 'right': '' },
    \ 'subseparator': { 'left' : '', 'right': '' },
\ }

" mode
function! LightlineMode()
    let l:fname = expand('%:t')
    return l:fname
        \ =~ '__vista__'            ? 'Vista.vim'
        \ :  l:fname =~ 'defx.nvim' ? 'defx.nvim'
        \ :  winwidth(0) > 60       ? lightline#mode()
        \ :  ''
endfunction

" fugitive
function! LightlineFugitive()
    if expand('%:t') !~ '\(__vista__\|defx.nvim\)' && exists('*fugitive#head')
        let l:mark   = ' '
        let l:branch = fugitive#head()
        return l:branch !=# '' ? l:mark . l:branch : ''
    endif
    return ''
endfunction

" filename
function! LightlineReadonly()
    return &ft !~? 'help' && &readonly ? '' : ''
endfunction
function! LightlineModified()
    return &ft
        \ =~ 'help'      ? ''
        \ :  &modified   ? '+'
        \ :  &modifiable ? ''
        \ :  '-'
endfunction
function! LightlineFilename()
    let l:fname = expand('%:t')
    return l:fname
        \ =~ '\(__vista__\|defx.nvim\)' ? ''
        \ : ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '')
            \ . ('' != l:fname ? l:fname : '[No Name]')
            \ . ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

" line info
function! LightLineLineInfo()
    return expand('%:t')
        \ =~ '\(__vista__\|defx.nvim\)' ? ''
        \ :  ' ' . line('.') . ':' . col('.')
endfunction

" line percent
function! LightLinePercent()
    return expand('%:t')
        \ =~ '\(__vista__\|defx.nvim\)' ? ''
        \ :  line('.') * 100 / line('$') . '%'
endfunction

" file format
function! LightlineFileformat()
    return winwidth(0) > 70
        \ ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol())
        \ : ''
endfunction

" file encoding
function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

" file type
function! LightlineFiletype()
    return winwidth(0) > 70
        \ ? (
            \ strlen(&filetype)
                \ ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol()
                \ : 'no ft'
            \ )
        \ : ''
endfunction

" tabline
" Doc: https://neovim.io/doc/user/options.html#'tabline'
set showtabline=2
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['ale', 'lightline.vim']
hook_add = '''
" indicator
let g:lightline#ale#indicator_checking = ' '
let g:lightline#ale#indicator_warnings = ' '
let g:lightline#ale#indicator_errors   = ' '
let g:lightline#ale#indicator_ok       = ' '
'''
